diff --git a/src/Canvas.java b/src/Canvas.java
index 396e6a8..5508ee6 100644
--- a/src/Canvas.java
+++ b/src/Canvas.java
@@ -11,7 +11,8 @@ import java.io.IOException;
 public class Canvas extends JPanel implements MouseListener, MouseMotionListener {
     private LinkedList<Shape> shapes = new LinkedList<>();
     private LinkedList<Link> links = new LinkedList<>(); // To store links
-    private Shape selectedShape;
+    private LinkedList<Shape> selectShapes = new LinkedList<>();
+    // private Shape selectedShape;
     private Shape startLinkShape; // Temporary start shape for drawing links
     private Shape endLinkShape;   // Temporary end shape for drawing links
     private Point dragStart;
@@ -37,6 +38,7 @@ public class Canvas extends JPanel implements MouseListener, MouseMotionListener
             JOptionPane.showMessageDialog(this, "Error loading link images!", "Error", JOptionPane.ERROR_MESSAGE);
         }
     }
+
     public String getCurrentMode() {
         return currentMode;
     }
@@ -46,13 +48,8 @@ public class Canvas extends JPanel implements MouseListener, MouseMotionListener
         repaint();
     }
 
-    public Shape getSelectedShape() {
-        return selectedShape;
-    }
-
-    public void setSelectedShape(Shape shape) {
-        this.selectedShape = shape;
-        repaint();
+    public LinkedList<Shape> getSelectedShapes() { // Corrected method name
+        return selectShapes;
     }
 
     public void addShape(Shape shape) {
@@ -75,6 +72,9 @@ public class Canvas extends JPanel implements MouseListener, MouseMotionListener
         super.paintComponent(g);
         Graphics2D g2d = (Graphics2D) g;
 
+            System.out.println("Shapes list size: " + shapes.size());
+
+
         // Draw shapes
         for (Shape shape : shapes) {
             shape.draw(g2d);
@@ -88,8 +88,6 @@ public class Canvas extends JPanel implements MouseListener, MouseMotionListener
         if ((currentMode.equals("association") || currentMode.equals("generalization") || currentMode.equals("composition")) && startLinkShape != null) {
             g2d.setColor(Color.BLACK);
             g2d.drawLine((int) startLinkShape.getBounds().getCenterX(), (int) startLinkShape.getBounds().getCenterY(), (int) dragStart.x, (int) dragStart.y);
-
-
         }
 
         if (currentRect != null) {
@@ -102,7 +100,7 @@ public class Canvas extends JPanel implements MouseListener, MouseMotionListener
             g2d.drawOval((int) currentOval.x, (int) currentOval.y, (int) currentOval.width, (int) currentOval.height);
         }
 
-        if (selectedShape != null) {
+        for (Shape selectedShape : selectShapes) {
             g2d.setColor(Color.BLUE);
             g2d.setStroke(new BasicStroke(2));
             Rectangle bounds = selectedShape.getBounds();
@@ -114,39 +112,41 @@ public class Canvas extends JPanel implements MouseListener, MouseMotionListener
         }
     }
 
-private void drawPorts(Graphics2D g2d, Rectangle bounds) {
-    int portSize = 6;
-    g2d.setColor(Color.BLACK);
-
-    if (selectedShape instanceof Oval) {
-        double centerX = bounds.getCenterX();
-        double centerY = bounds.getCenterY();
-        double halfWidth = bounds.getWidth() / 2;
-        double halfHeight = bounds.getHeight() / 2;
-
-        // North
-        g2d.fillRect((int) centerX - portSize / 2, bounds.y - portSize / 2, portSize, portSize);
-        // South
-        g2d.fillRect((int) centerX - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize);
-        // West
-        g2d.fillRect(bounds.x - portSize / 2, (int) centerY - portSize / 2, portSize, portSize);
-        // East
-        g2d.fillRect(bounds.x + bounds.width - portSize / 2, (int) centerY - portSize / 2, portSize, portSize);
-    } else if (selectedShape instanceof Rect) {
-        // Draw eight ports for rectangles
-        // Corners
-        g2d.fillRect(bounds.x - portSize / 2, bounds.y - portSize / 2, portSize, portSize);             // Top Left
-        g2d.fillRect(bounds.x + bounds.width - portSize / 2, bounds.y - portSize / 2, portSize, portSize);       // Top Right
-        g2d.fillRect(bounds.x - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize);    // Bottom Left
-        g2d.fillRect(bounds.x + bounds.width - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize); // Bottom Right
-
-        // Midpoints
-        g2d.fillRect(bounds.x + bounds.width / 2 - portSize / 2, bounds.y - portSize / 2, portSize, portSize);             // Top
-        g2d.fillRect(bounds.x + bounds.width / 2 - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize); // Bottom
-        g2d.fillRect(bounds.x - portSize / 2, bounds.y + bounds.height / 2 - portSize / 2, portSize, portSize);             // Left
-        g2d.fillRect(bounds.x + bounds.width - portSize / 2, bounds.y + bounds.height / 2 - portSize / 2, portSize, portSize); // Right
+    private void drawPorts(Graphics2D g2d, Rectangle bounds) {
+        int portSize = 6;
+        g2d.setColor(Color.BLACK);
+
+        for (Shape selectedShape : selectShapes) {
+            if (selectedShape instanceof Oval) {
+                double centerX = bounds.getCenterX();
+                double centerY = bounds.getCenterY();
+                double halfWidth = bounds.getWidth() / 2;
+                double halfHeight = bounds.getHeight() / 2;
+
+                // North
+                g2d.fillRect((int) centerX - portSize / 2, bounds.y - portSize / 2, portSize, portSize);
+                // South
+                g2d.fillRect((int) centerX - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize);
+                // West
+                g2d.fillRect(bounds.x - portSize / 2, (int) centerY - portSize / 2, portSize, portSize);
+                // East
+                g2d.fillRect(bounds.x + bounds.width - portSize / 2, (int) centerY - portSize / 2, portSize, portSize);
+            } else if (selectedShape instanceof Rect) {
+                // Draw eight ports for rectangles
+                // Corners
+                g2d.fillRect(bounds.x - portSize / 2, bounds.y - portSize / 2, portSize, portSize);             // Top Left
+                g2d.fillRect(bounds.x + bounds.width - portSize / 2, bounds.y - portSize / 2, portSize, portSize);       // Top Right
+                g2d.fillRect(bounds.x - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize);    // Bottom Left
+                g2d.fillRect(bounds.x + bounds.width - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize); // Bottom Right
+
+                // Midpoints
+                g2d.fillRect(bounds.x + bounds.width / 2 - portSize / 2, bounds.y - portSize / 2, portSize, portSize);             // Top
+                g2d.fillRect(bounds.x + bounds.width / 2 - portSize / 2, bounds.y + bounds.height - portSize / 2, portSize, portSize); // Bottom
+                g2d.fillRect(bounds.x - portSize / 2, bounds.y + bounds.height / 2 - portSize / 2, portSize, portSize);             // Left
+                g2d.fillRect(bounds.x + bounds.width - portSize / 2, bounds.y + bounds.height / 2 - portSize / 2, portSize, portSize); // Right
+            }
+        }
     }
-}
 
     private Shape findShapeAt(Point p) {
         for (int i = shapes.size() - 1; i >= 0; i--) {
@@ -160,17 +160,19 @@ private void drawPorts(Graphics2D g2d, Rectangle bounds) {
     private void selectShape(Point p) {
         Shape foundShape = findShapeAt(p);
         if (foundShape != null) {
-            if (selectedShape != null && selectedShape != foundShape) {
-                // Deselect previously selected shape
-                selectedShape = null;
+            for (Shape shape : selectShapes) {
+                if (shape == foundShape) {
+                    return; // Shape already selected, do nothing
+                }
             }
-            selectedShape = foundShape;
+
+            selectShapes.add(foundShape);
             // Calculate offset for dragging
-            Rectangle bounds = selectedShape.getBounds();
+            Rectangle bounds = foundShape.getBounds(); // Corrected to use foundShape
             dragOffsetX = p.x - bounds.x;
             dragOffsetY = p.y - bounds.y;
         } else {
-            selectedShape = null;
+            selectShapes.clear(); // Clear selection if no shape found
         }
         repaint();
     }
@@ -193,51 +195,53 @@ private void drawPorts(Graphics2D g2d, Rectangle bounds) {
         }
     }
 
-@Override
-public void mouseDragged(MouseEvent e) {
-    Point p = e.getPoint();
-    if (currentMode.equals("select") && selectedShape != null) {
-        // Move the selected shape
-        double deltaX = p.x - (selectedShape instanceof Rect ? ((Rect) selectedShape).x : ((Oval) selectedShape).x);
-        double deltaY = p.y - (selectedShape instanceof Rect ? ((Rect) selectedShape).y : ((Oval) selectedShape).y);
-
-        if (selectedShape instanceof Rect) {
-            Rect rect = (Rect) selectedShape;
-            rect.x += deltaX - dragOffsetX;
-            rect.y += deltaY - dragOffsetY;
-        } else if (selectedShape instanceof Oval) {
-            Oval oval = (Oval) selectedShape;
-            oval.x += deltaX - dragOffsetX;
-            oval.y += deltaY - dragOffsetY;
-        }
+    @Override
+    public void mouseDragged(MouseEvent e) {
+        Point p = e.getPoint();
+        for (Shape selectedShape : selectShapes) {
+        if (currentMode.equals("select") && selectedShape != null) {
+            // Move the selected shape
+            double deltaX = p.x - (selectedShape instanceof Rect ? ((Rect) selectedShape).x : ((Oval) selectedShape).x);
+            double deltaY = p.y - (selectedShape instanceof Rect ? ((Rect) selectedShape).y : ((Oval) selectedShape).y);
+
+            if (selectedShape instanceof Rect) {
+                Rect rect = (Rect) selectedShape;
+                rect.x += deltaX - dragOffsetX;
+                rect.y += deltaY - dragOffsetY;
+            } else if (selectedShape instanceof Oval) {
+                Oval oval = (Oval) selectedShape;
+                oval.x += deltaX - dragOffsetX;
+                oval.y += deltaY - dragOffsetY;
+            }
 
-        Rectangle selectedBounds = selectedShape.getBounds();
+            Rectangle selectedBounds = selectedShape.getBounds();
 
-        // Update links connected to this shape
-        for (Link link : links) {
-            if (link.getStartShape() == selectedShape) {
-                link.setStartPoint(getClosestPort(selectedBounds, link.getEndPointOnOtherShape()));
-            }
-            if (link.getEndShape() == selectedShape) {
-                link.setEndPoint(getClosestPort(selectedBounds, link.getStartPointOnOtherShape()));
+            // Update links connected to this shape
+            for (Link link : links) {
+                if (link.getStartShape() == selectedShape) {
+                    link.setStartPoint(getClosestPort(selectedBounds, link.getEndPointOnOtherShape()));
+                }
+                if (link.getEndShape() == selectedShape) {
+                    link.setEndPoint(getClosestPort(selectedBounds, link.getStartPointOnOtherShape()));
+                }
             }
-        }
 
-        dragOffsetX = (int) deltaX;
-        dragOffsetY = (int) deltaY;
+            dragOffsetX = (int) deltaX;
+            dragOffsetY = (int) deltaY;
 
-        repaint();
-    } else if (currentMode.equals("rect") && currentRect != null) {
-        currentRect.setBounds(Math.min(dragStart.x, p.x), Math.min(dragStart.y, p.y), Math.abs(dragStart.x - p.x), Math.abs(dragStart.y - p.y));
-        repaint();
-    } else if (currentMode.equals("oval") && currentOval != null) {
-        currentOval.setFrame(Math.min(dragStart.x, p.x), Math.min(dragStart.y, p.y), Math.abs(dragStart.x - p.x), Math.abs(dragStart.y - p.y));
-        repaint();
-    } else if ((currentMode.equals("association") || currentMode.equals("generalization") || currentMode.equals("composition")) && startLinkShape != null) {
-        dragStart = p; // Update dragStart to the current mouse position for temporary line
-        repaint();
+            repaint();
+        } else if (currentMode.equals("rect") && currentRect != null) {
+            currentRect.setBounds(Math.min(dragStart.x, p.x), Math.min(dragStart.y, p.y), Math.abs(dragStart.x - p.x), Math.abs(dragStart.y - p.y));
+            repaint();
+        } else if (currentMode.equals("oval") && currentOval != null) {
+            currentOval.setFrame(Math.min(dragStart.x, p.x), Math.min(dragStart.y, p.y), Math.abs(dragStart.x - p.x), Math.abs(dragStart.y - p.y));
+            repaint();
+        } else if ((currentMode.equals("association") || currentMode.equals("generalization") || currentMode.equals("composition")) && startLinkShape != null) {
+            dragStart = p; // Update dragStart to the current mouse position for temporary line
+            repaint();
+        }
+        }
     }
-}
 
     @Override
     public void mouseMoved(MouseEvent e) {
@@ -287,58 +291,60 @@ public void mouseDragged(MouseEvent e) {
         dragStart = null;
     }
     
-private Point2D.Double getClosestPort(Rectangle bounds, Point p) {
-    double centerX = bounds.getCenterX();
-    double centerY = bounds.getCenterY();
-    double dx = p.x - centerX;
-    double dy = p.y - centerY;
-
-    double angle = Math.atan2(dy, dx);
-    double x = 0, y = 0;
-    double minDistanceSq = Double.MAX_VALUE;
-
-    if (selectedShape instanceof Oval) {
-        // Find closest of the four cardinal direction ports for ovals
-        double halfWidth = bounds.getWidth() / 2;
-        double halfHeight = bounds.getHeight() / 2;
-
-        // North
-        double distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMinY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMinY(); }
-        // South
-        distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMaxY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMaxY(); }
-        // West
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), centerY);
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = centerY; }
-        // East
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), centerY);
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = centerY; }
-    } else {
-        // Find closest of the eight ports for rectangles
-        // Corners
-        double distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), bounds.getMinY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = bounds.getMinY(); }
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), bounds.getMinY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = bounds.getMinY(); }
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), bounds.getMaxY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = bounds.getMaxY(); }
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), bounds.getMaxY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = bounds.getMaxY(); }
-
-        // Midpoints
-        distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMinY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMinY(); }
-        distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMaxY());
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMaxY(); }
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), centerY);
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = centerY; }
-        distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), centerY);
-        if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = centerY; }
-    }
+    private Point2D.Double getClosestPort(Rectangle bounds, Point p) {
+        double centerX = bounds.getCenterX();
+        double centerY = bounds.getCenterY();
+        double dx = p.x - centerX;
+        double dy = p.y - centerY;
+
+        double angle = Math.atan2(dy, dx);
+        double x = 0, y = 0;
+        double minDistanceSq = Double.MAX_VALUE;
+
+        for (Shape selectedShape : selectShapes) {
+        if (selectedShape instanceof Oval) {
+            // Find closest of the four cardinal direction ports for ovals
+            double halfWidth = bounds.getWidth() / 2;
+            double halfHeight = bounds.getHeight() / 2;
+
+            // North
+            double distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMinY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMinY(); }
+            // South
+            distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMaxY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMaxY(); }
+            // West
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), centerY);
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = centerY; }
+            // East
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), centerY);
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = centerY; }
+        } else {
+            // Find closest of the eight ports for rectangles
+            // Corners
+            double distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), bounds.getMinY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = bounds.getMinY(); }
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), bounds.getMinY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = bounds.getMinY(); }
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), bounds.getMaxY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = bounds.getMaxY(); }
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), bounds.getMaxY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = bounds.getMaxY(); }
+
+            // Midpoints
+            distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMinY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMinY(); }
+            distSq = Point2D.distanceSq(p.x, p.y, centerX, bounds.getMaxY());
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = centerX; y = bounds.getMaxY(); }
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMinX(), centerY);
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMinX(); y = centerY; }
+            distSq = Point2D.distanceSq(p.x, p.y, bounds.getMaxX(), centerY);
+            if (distSq < minDistanceSq) { minDistanceSq = distSq; x = bounds.getMaxX(); y = centerY; }
+        }
+        }
 
-    return new Point2D.Double(x, y);
-}
+        return new Point2D.Double(x, y);
+    }
 
     @Override
     public void mouseClicked(MouseEvent e) {
diff --git a/src/EditMenu.java b/src/EditMenu.java
index f225b28..3ba09a0 100644
--- a/src/EditMenu.java
+++ b/src/EditMenu.java
@@ -2,6 +2,7 @@ import javax.swing.*;
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.util.LinkedList; // Add this import statement
 
 public class EditMenu extends JMenuBar {
     private Canvas canvas;
@@ -20,8 +21,13 @@ public class EditMenu extends JMenuBar {
         labelMenuItem.addActionListener(new ActionListener() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                Shape selectedShape = canvas.getSelectedShape();
-                if (selectedShape != null) {
+                LinkedList<Shape> selectShapes = canvas.getSelectedShapes();
+                Shape selectShape = null;
+                if (selectShapes.size() != 0) {
+                    selectShape = selectShapes.get(0); // Corrected line
+                }
+
+                if (selectShape != null) {
                     // Create a panel for shape editing
                     JPanel panel = new JPanel();
                     panel.setLayout(new GridLayout(4, 2));
@@ -29,23 +35,23 @@ public class EditMenu extends JMenuBar {
                     // Shape Type
                     String[] shapeTypes = {"Rect", "Oval"};
                     JComboBox<String> shapeTypeComboBox = new JComboBox<>(shapeTypes);
-                    shapeTypeComboBox.setSelectedItem(selectedShape instanceof Rect ? "Rect" : "Oval");
+                    shapeTypeComboBox.setSelectedItem(selectShapes.get(0) instanceof Rect ? "Rect" : "Oval");
 
                     // Name (Text Label)
-                    JTextField nameTextField = new JTextField(selectedShape.getName());
+                    JTextField nameTextField = new JTextField(selectShapes.get(0).getName());
 
                     // Background Color
                     JButton colorButton = new JButton("Choose Color");
-                    colorButton.setBackground(selectedShape.getBackgroundColor());
+                    colorButton.setBackground(selectShapes.get(0).getBackgroundColor());
                     colorButton.addActionListener(e1 -> {
-                        Color newColor = JColorChooser.showDialog(canvas, "Choose Background Color", selectedShape.getBackgroundColor());
+                        Color newColor = JColorChooser.showDialog(canvas, "Choose Background Color", selectShapes.get(0).getBackgroundColor());
                         if (newColor != null) {
                             colorButton.setBackground(newColor);
                         }
                     });
 
                     // Font Size
-                    JTextField fontSizeTextField = new JTextField(String.valueOf(selectedShape.getFontSize()));
+                    JTextField fontSizeTextField = new JTextField(String.valueOf(selectShapes.get(0).getFontSize()));
 
                     panel.add(new JLabel("Shape Type:"));
                     panel.add(shapeTypeComboBox);
@@ -65,26 +71,26 @@ public class EditMenu extends JMenuBar {
                         int newFontSize = Integer.parseInt(fontSizeTextField.getText());
 
                         // Update shape properties and change shape type
-                        if (!selectedShapeType.equals(selectedShape.getClass().getSimpleName())) {
+                        if (!selectedShapeType.equals(selectShapes.get(0).getClass().getSimpleName())) {
                             // Change shape type
                             if (selectedShapeType.equals("Oval")) {
                                 // Create a new Oval with the same properties as the Rect
-                                Oval newOval = new Oval(selectedShape.x, selectedShape.y, selectedShape.width, selectedShape.height,
+                                Oval newOval = new Oval(selectShapes.get(0).x, selectShapes.get(0).y, selectShapes.get(0).width, selectShapes.get(0).height,
                                         newColor, newName, newFontSize);
 
                                 // Replace the old Rect with the new Oval in the Canvas
-                                canvas.replaceShape(selectedShape, newOval);
+                                canvas.replaceShape(selectShapes.get(0), newOval);
                             } else if (selectedShapeType.equals("Rect")){
-                                Rect newRect = new Rect(selectedShape.x, selectedShape.y, selectedShape.width, selectedShape.height,
+                                Rect newRect = new Rect(selectShapes.get(0).x, selectShapes.get(0).y, selectShapes.get(0).width, selectShapes.get(0).height,
                                         newColor, newName, newFontSize);
                                 // Replace the old Oval with the new Rect in the Canvas
-                                canvas.replaceShape(selectedShape, newRect);
+                                canvas.replaceShape(selectShapes.get(0), newRect);
                             }
                         } else {
                             // Only update properties if shape type didn't change
-                            selectedShape.setName(newName);
-                            selectedShape.setBackgroundColor(newColor);
-                            selectedShape.setFontSize(newFontSize);
+                            selectShapes.get(0).setName(newName);
+                            selectShapes.get(0).setBackgroundColor(newColor);
+                            selectShapes.get(0).setFontSize(newFontSize);
                         }
 
                         canvas.repaint();
@@ -101,7 +107,11 @@ public class EditMenu extends JMenuBar {
     }
 
     public void updateMenuItemsState() {
-        boolean shapeSelected = canvas.getSelectedShape() != null;
+        LinkedList<Shape> selectShapes = canvas.getSelectedShapes();
+        boolean shapeSelected = true;
+        if (selectShapes.size() == 0) {
+            shapeSelected = false;
+        }
         ungroupMenuItem.setEnabled(shapeSelected);
         groupMenuItem.setEnabled(shapeSelected);
         labelMenuItem.setEnabled(shapeSelected);
